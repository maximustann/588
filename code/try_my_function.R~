library(rgl)
library(mopsocd)
library(foreach)
library(doMC)
registerDoMC(8)

source("./nsga2_pre.R")


varcount <- 9
fncount <- 2
lbound <- rep(0, 9)
ubound <- rep(1, 9)
optim <- 0
threshold <- 0.5
maxgen <- 50
popsize <- 50


predata(3)


unNormalized_latency_fitness <- function(chromosome, matrixSize, threshold){
	#chromosome <- as.integer(chromosome)
	latency <- 0.0
	
	chromosome <- sapply(chromosome, function(x, threshold) if(x > threshold) 1 else 0, threshold)
	chromosome <- matrix(chromosome, nrow = matrixSize, ncol = matrixSize)
	frequency <- colSums(frequency_matrix)
	num_of_Usercenter <- matrixSize
	response_matrix <- vector()
	for(user_iter in 1:matrixSize){
		for(service_iter in 1:matrixSize){
			num_of_service <- sum(chromosome[service_iter, ])
			deployed_service <- which(chromosome[service_iter, ] == 1)
			if(num_of_service > 1){
				response_matrix <- c(response_matrix, min(latency_matrix[service_iter, deployed_service]))
			}
			else{
				response_matrix <- c(response_matrix, latency_matrix[service_iter, deployed_service])
			}
		}
	}
	response_matrix <- matrix(response_matrix, nrow = matrixSize, matrixSize, byrow = T)
	latency <- sum(response_matrix * frequency_matrix)
	#print(latency)
	if(is.na(latency)){
		return(1000000000)
	}
	latency
}


search_maximum_latency <- function(matrixSize, threshold){
	initial_matrix <- matrix(c(rep(1, matrixSize), rep(0, matrixSize * (matrixSize - 1))), nrow = matrixSize)
	latency <- 0.0
	for(row_iter in 1:matrixSize){
		for(col_iter in 1:matrixSize){
			if(row_iter == 1 && col_iter == 1){
				latency <- unNormalized_latency_fitness(initial_matrix, matrixSize, threshold)
				next
			}
			num <- which(initial_matrix[row_iter, ] == 1)
			initial_matrix[row_iter, num] <- 0
			initial_matrix[row_iter, col_iter] <- 1
			current_latency <- unNormalized_latency_fitness(initial_matrix, matrixSize, threshold)
			if(current_latency > latency){
				latency <- current_latency
			}
			else{
				initial_matrix[row_iter, col_iter] <- 0
				initial_matrix[row_iter, num] <- 1
			}
		}
	}
	latency
}
min_latency <- 0
max_latency <- search_maximum_latency(3, threshold)

search_minimum_cost <- function(matrixSize){
	mini_cost_matrix <- matrix(rep(0, matrixSize * matrixSize), nrow = matrixSize)
	for(row_iter in 1:matrixSize){
		pos <- which(cost_matrix[row_iter, ] == min(cost_matrix[row_iter, ]))[1]
		mini_cost_matrix[row_iter, pos] <- 1
	}
	#print(mini_cost_matrix)
	mini_cost_matrix
}
print(cost_matrix)
min_cost <- sum(search_minimum_cost(3) * cost_matrix)
max_cost <- sum(cost_matrix)

normalized_cost_fitness <- function(chromosome, matrixSize, max_cost, min_cost, threshold){
	cost <- unNormalized_cost_fitness(chromosome, matrixSize, threshold)
	cost <- normalize(cost, max_cost, min_cost)
	cost
}
unNormalized_cost_fitness <- function(chromosome, matrixSize, threshold){
	chromosome <- sapply(chromosome, function(x, threshold) if(x > threshold) 1 else 0, threshold)
	chromosome <- matrix(chromosome, nrow = matrixSize, ncol = matrixSize)
	cost <- sum(chromosome * cost_matrix)
	#print(cost)
	cost
}

normalized_latency_fitness <- function(chromosome, matrixSize, max_latency, min_latency, threshold){
	latency <- unNormalized_latency_fitness(chromosome, matrixSize, threshold)
	latency <- normalize(latency, max_latency, min_latency)
	latency
}

#Limitation of cost
cost_constraint_check <- function(chromosome, limitation, matrixSize, threshold){
	chromosome <- sapply(chromosome, function(x, threshold) if(x > threshold) 1 else 0, threshold)
	chromosome_m <- matrix(chromosome, nrow = matrixSize, ncol = matrixSize)
	cost <- sum(chromosome_m * cost_matrix)
	if(cost > limitation) return(F)
	#return(chromosome)
	return(T)
}


services_constraint_check <- function(chromosome, matrixSize, threshold){
	chromosome <- sapply(chromosome, function(x, threshold) if(x > threshold) 1 else 0, threshold)
	chromosome_m <- matrix(chromosome, nrow = matrixSize, ncol = matrixSize)
	#if(prod(apply(chromosome_m, 1, services_minimum)) == 0) return(F)
	if(prod(apply(chromosome_m, 1, function(x) sum(x) > 0)) == 0) return(F)
	#return(chromosome)
	return(T)
}


constraint <- function(chromosome){
	threshold <- 0.5
	matrixSize <- 3
	limitation <- 900
	cost_constraint <- cost_constraint_check(chromosome, limitation, matrixSize, threshold)
	service_constraint <- services_constraint_check(chromosome, matrixSize, threshold)
	return(c(cost_constraint, service_constraint))
}


normalize <- function(value, max_value, min_value){
	#cat("value = ", value, "max_value = ", max_value, "min_value", min_value, "\n")
	normalized_data <- vector()
	normalized_data <- (value - min_value) / (max_value - min_value)
	#-----------------Debug --------------------------------
	#if(normalized_data < 0){
		#cat("value = ", value, "max_value = ", max_value, "min_value", min_value, "\n")
	#}
	#if(value > max_value){
		#cat("value = ", value, "max_value = ", max_value, "min_value", min_value, "\n")
	#}
	#-----------------Debug --------------------------------
	normalized_data
}

webfn <- function(chromosome) {
	threshold <- 0.5
	matrixSize <- 3
	cost <- normalized_cost_fitness(chromosome, matrixSize, max_cost, min_cost, threshold)
	latency <- normalized_latency_fitness(chromosome, matrixSize, max_latency, min_latency, threshold)
	return(c(cost, latency))
}


run <- function(){
	foreach(iter = 1:40) %dopar%{
		ptm <- proc.time()
		experiment1 <- mopsocd(webfn, constraint, varcnt=varcount, fncnt=fncount,
					   	lowerbound=lbound, upperbound=ubound,opt=optim, maxgen=maxgen, popsize=popsize)
		print((proc.time() - ptm)[1])
		for(i in 1:nrow(experiment1$paramvalues)){
			print(matrix(sapply(experiment1$paramvalues[i,], function(x, threshold) if(x > threshold) 1 else 0, threshold), nrow = 3))
			print(webfn(sapply(experiment1$paramvalues[i,], function(x, threshold) if(x > threshold) 1 else 0, threshold)))
		}
	}

}
	
	
##print(experiment1$numsols)
##print(experiment1$objfnvalues)
#print(experiment1$paramvalues)

#for(i in 1:nrow(experiment1$paramvalues)){
	#print(matrix(sapply(experiment1$paramvalues[i,], check, threshold), nrow = 3))
	#print(webfn(sapply(experiment1$paramvalues[i,], check, threshold)))
#}

